namespace MistralChat.ViewModels;
using System.ComponentModel;

/// <summary>Interface to access entry of the chat log.</summary>
/// <remarks>The <see cref="ChatVM" /> object owns an observable collection of these items</remarks>
public interface iChatMessageVM
{
	bool user { get; }
	string text { get; }
}

/// <summary>A readonly chat entry</summary>
sealed record class ChatMessageVM: iChatMessageVM
{
	public bool user { get; }
	public string text { get; }

	public ChatMessageVM( string text, bool user )
	{
		this.text = text;
		this.user = user;
	}
	public override string ToString() => text;
}

/// <summary>Pending chat entry being generated by the AI</summary>
sealed class PendingChatMessageVM: PropertyChangedBase, iChatMessageVM
{
	public bool user => false;
	public string text { get; private set; } = "";

	// Background thread updates the text often, after each generated token.
	// Cache PropertyChangedEventArgs which triggers the GUI update.
	readonly PropertyChangedEventArgs pcea = new PropertyChangedEventArgs( nameof( text ) );

	/// <summary>Set the text, and trigged GUI update</summary>
	public void setText( string text = "" )
	{
		this.text = text;
		Notify( pcea );
	}

	public override string ToString() => text;
}