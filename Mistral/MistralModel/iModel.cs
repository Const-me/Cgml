namespace Mistral;

/// <summary>Loaded model in VRAM which can run inference if asked</summary>
public interface iModel: IDisposable
{
	/// <summary>Get tokenizer interface</summary>
	iTokenizer tokenizer { get; }

	/// <summary>Generate response text within an interactive session</summary>
	string generate( IReadOnlyList<int> tokens, ChatClient client );

	/// <summary>Generate the text</summary>
	string generate( string prompt, int maxTokens );

	/// <summary>Get the amount of VRAM memory for the model's tensors which weren't loaded from the source file</summary>
	void getVideoMemoryUsage( out long kv, out long temp );

	/// <summary>Get version of the model</summary>
	eModelVersion modelVersion { get; }

	/// <summary>Parameters which affect sampling of the tokens generated by the model</summary>
	/// <remarks>When null, disable randomness and select the most probable token, like the <c>one_file_ref.py</c> script does.</remarks>
	SamplingParams? samplingParams { get; set; }

	/// <summary>User-adjustable parameters related to GPU performance</summary>
	PerformanceParams performanceParams { get; }

	/// <summary>Description string for UI</summary>
	public string description();

	/// <summary>Get profiler data from C++ backend, convert to C# arrays of structures</summary>
	ProfilerData? profilerData();

	/// <summary>Get profiler data from C++ backend, convert to human-readable text</summary>
	IEnumerable<string> profilerMeasures();

	/// <summary>Backup state of the model</summary>
	/// <param name="input">Unless null, the method will replace payload data in the old object</param>
	/// <returns>An object which keeps state of the transformer</returns>
	iModelState stateBackup( iModelState? input );

	/// <summary>Restore internal state of the transformer</summary>
	/// <remarks>Pass null to reset that state</remarks>
	void stateRestore( iModelState? state );
}

/// <summary>Utility interface to backup/restore internal state of the model</summary>
/// <remarks>The object includes copy of K/V caches, and not much else</remarks>
public interface iModelState: IDisposable
{ }