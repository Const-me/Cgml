namespace PackShaders;

sealed class CbufferWriter: IDisposable
{
	StreamWriter writer;
	public CbufferWriter()
	{
		string path = Path.Combine( Program.inputs.result, "ConstantBuffers.cs" );
		writer = File.CreateText( path );
		writer.WriteLine( @"// This source file is generated by PackShaders.exe tool, from HLSL source codes
#pragma warning disable CS0169 // field `padding` is never used
namespace {0};
using Cgml;

static class ConstantBuffers
{{", Program.inputs.ns );
	}

	public void Dispose()
	{
		writer?.Write( "}" );
		writer?.Flush();
		writer?.Dispose();
	}

	bool first = true;

	void writePadding( int countElements, ref int idx )
	{
		int i = idx;
		idx++;
		string name = ( 0 == i ) ? "padding" : $"padding{i + 1}";
		string type = countElements switch
		{
			1 => "uint",
			2 => "uint2",
			3 => "uint3",
			_ => throw new NotSupportedException()
		};
		writer.WriteLine( "\t\t{0} {1};", type, name );
	}

	/// <summary></summary>
	public void add( string shaderName, ResourceBinding res )
	{
		if( res.kind != eResourceKind.CBuffer )
			throw new ArgumentException();

		if( first )
			first = false;
		else
			writer.WriteLine();

		ConstantBufferField[] fields = ( res.extraData as ConstantBufferField[] ) ?? throw new ArgumentException();
		fields = fields
			.OrderBy( f => f.idxVector )
			.ThenBy( f => f.idxOffset )
			.ToArray();

		if( null != res.comment )
			writer.WriteLine( "\t/// <summary>{0}</summary>", res.comment );
		writer.WriteLine( "\tpublic struct {0}", shaderName );
		writer.WriteLine( "\t{" );

		int rdi = 0;
		int nextPaddingIndex = 0;
		foreach( ConstantBufferField field in fields )
		{
			int index = field.idxVector * 4 + field.idxOffset;
			if( index < rdi )
				throw new ArgumentException();
			else if( index > rdi )
			{
				int gapSize = index - rdi;
				writePadding( gapSize, ref nextPaddingIndex );
				rdi = index;
			}

			if( null != field.comment )
				writer.WriteLine( "\t\t/// <summary>{0}</summary>", field.comment );
			writer.WriteLine( "\t\tpublic {0} {1};", field.csType, field.name );
			rdi += field.size;
		}

		writer.WriteLine( "\t}" );
	}
}